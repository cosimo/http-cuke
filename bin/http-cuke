#!/usr/bin/perl

#-----------------------------------------------------------------------------
#
# http-cuke - Cucumber-style HTTP configuration testing for the masses
#
# See __END__ for the full documentation
#
#-----------------------------------------------------------------------------

use 5.014;
use strict;
use open qw( :encoding(UTF-8) :std );
use utf8;
use warnings qw( FATAL utf8 );
use autodie;

use Carp ();
use File::Spec ();
use File::Slurp ();
use Getopt::Long ();
use Test::More;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use Test::Cukes ();
use Test::Cukes::HTTP;

sub tests_list {
    my ($features_dir) = @_;
    if (! $features_dir || ! -d $features_dir) {
        Carp::croak "Can't find tests directory '$features_dir'";
    }
    my @features;
    if (opendir my $f_dir, $features_dir) {
        @features = grep { $_ =~ m(^ .+ \. test $)x } readdir $f_dir;
        closedir $f_dir;
    }

    return @features;
}

sub load_test_feature {
    my ($feature_file, $vars) = @_;

    local $_;

    if (! -e $feature_file) {
        Carp::croak("Can't find test file '$feature_file'");
    }

    my @test_feature = File::Slurp::read_file($feature_file, binmode => ':utf8');

    # Strip comments, as Test::Cukes doesn't like them
    my @lines;
    for my $line (@test_feature) {
        if ($line =~ m/\{\{ .+ \}\}/x) {
            $line =~ s/\{\{ \s* (\w+) \s* \}\}/
                my $v = $vars->{$1};
                if (! defined $v) {
                    Carp::croak("Undefined variable '$1' in line:\n\n\t$line\n");
                };
                $v/gxe;
        }
        next if $line =~ m{^ \s* \#}x;
        push @lines, $line;
    }

    return join("", @lines);
}

Getopt::Long::GetOptions(
    'test-dir:s' => \my $test_dir,
    'test:s'     => \my $test_file,
    'D:s'        => \my %variables,
);

if (! $test_dir && ! $test_file) {
    warn "Usage: $0 [--test-dir <your-test-cases-dir>] [--test <single-test-file>] [-D variable=value] [...]\n\n";
    warn "You need to specify a test directory where to load test cases from\n";
    warn "or a single test file to be run\n";
    exit 1;
}

my @test;

# Load a single test file
if ($test_file) {
    @test = ($test_file);
}

# Or an entire folder
elsif ($test_dir) {
    @test = tests_list($test_dir);
}

if (! @test) {
    die "No tests to run. Sure you have some *.test files in $test_dir?";
}

for (@test) {
    my $feature = load_test_feature($_, \%variables);
    Test::Cukes::feature($feature);
    #diag($feature);
    #diag("-" x 60);
}

Test::Cukes::runtests();

__END__

=head1 NAME

http-cuke - Cucumber-style HTTP configuration testing for the masses

=head1 SYNOPSIS

Example of test scenario:

    Feature: Front page responds correctly
    In order to avoid problems with caching logic and/or frontend configuration
    As an operations ninja
    I want to check that front page is served correctly and the frontends configuration is correct

    Scenario: HTTP to HTTPS redirects are in place
      When I go to "http://my.example.server.lan/"
      Then I should be redirected to "https://my.example.server.lan/"
      Then the final HTTP status code should be "200"

Put that text in a C<whatever.test> file, and point
C<http-cuke> to the directory that contains it with:

    http-cuke --test-dir ./some-tests

Or run just a single test file:

    http-cuke --test ./single.test

Have a look at the C<tests> directory where you will
find this example:

    Feature: Google front page allows me to search
    In order not to be stuck without being able to google something
    As a curious person
    I want to be check that Google is available

    Scenario: Google frontpage is available
      Given the HTTP request header "Accept-Language" is "en"
      When I go to "http://www.google.com/"
      Then the final HTTP status code should be "200"
      Then the page should contain "Google"

This is a test you can actually run with:

    cd bin
    ./http-cuke --test ../tests/example.test

You can also use B<variables> in your test files.
See the L<VARIABLES SUPPORT> chapter.

=head1 DESCRIPTION

Run cucumber style tests against any HTTP server.

If you are not familiar with cucumber, check it out
at L<http://cukes.info/>.

With this tool you can define set of tests (or B<features>
and B<scenarios> in cucumber-speak) and run them.

The type of tests that C<http-cuke> can help you with
are those that involve checking a HTTP server configuration,
behavior or plain responses.

You can check redirects, response headers, cookies,
response bodies, inject custom HTTP headers in the requests,
check Varnish responses, and more.


=head1 OTHER SUPPORTED OPTIONS

=over

=item C<--allow-insecure-ssl>

When this option is specified, C<http-cuke> will silently connect to HTTPS hosts
B<without verifying SSL certificates validity!>. This is B<INSECURE>, so only
do it if you are aware of the implications.

The typical use case is to connect to individual backends part of a bigger
cluster typically behind a load balancer.

=item C<--useragent-timeout>

How long should the user agent that makes the requests wait for backend
requests. This is using C<LWP::UserAgent>, so don't expect perfect control
of client timeout. For example, this will usually not include eventual DNS
timeouts/slowdowns, so the actual timeout might be much longer than you
specify.

Usage:

    http-cuke --useragent-timeout 10 --test ...

=item C<--useragent-string>

Override the default user agent string (C<http-cuke/version>).

Usage:

    http-cuke --useragent-string 'MyWebSiteTesterFTW/0.01'

=back


=head1 MOTIVATION: THE WHY

This tool is B<not> meant to replace tools like C<WWW::Mechanize>
or similar ones. It is meant to perform automated testing
for frontends configuration testing.

By frontend I mean Apache, Nginx, Varnish, and deadly
combinations of the three. It can be a nightmare to make
sure you have all the correct redirects in place, that
pages are cached according to your own logic, etc...

Yes, but even then, after all, cucumber is pretty well established.
So why?

Because of the dependencies mess. I don't want to depend
on too many packages, and Perl already has all the tools
I needed to do this. I just glued them together, and there
you have a TAP-compliant cucumber-style HTTP testing that
I can easily hook up to B<Jenkins>.

The B<main advantage of this tool> is that it opens up even
complex HTTP testing to a broader audience, not necessarily
programmers. That is, btw, the whole point of BDD testing,
and that's Good(tm).


=head1 VARIABLES SUPPORT

Here's an example of test script in Cucumber style:

    Feature: My service can be monitored correctly by Nagios
    In order to make sure that Nagios alerts don't fire unnecessarily
    As an operations ninja
    I want to verify that the resources accessed by Nagios are always available

    Scenario: ping.html page is served over http
      When I go to "http://my.server.local/ping.html"
      Then the final HTTP status code should be "200"
      Then the page should contain "I am alive"

It is possible (and desirable) to embed variables in your test files.
In the example above, instead of hardcoding the C<http://my.server.local>
address, you can use a variable like this:

    Scenario: ping.html page is served over http
      When I go to "{{ SERVER_URL }}/ping.html"
      Then the final HTTP status code should be "200"
      Then the page should contain "I am alive"

To run this test, you need to invoke C<http-cuke> with the C<-D>
option, to define variables. Example:

    http-cuke --test ./nagios.test -D SERVER_URL=http://my.server.local

If you use variables in your test scripts, but omit to declare them
when invoking C<http-cuke>, you will be warned with a message:

    Undefined variable 'SERVER_URL' in line:

      When I go to "{{ SERVER_URL }}/ping.html"


=head1 AVAILABLE TESTS

So what are the B<magic words> that are available to build
the test cases?

Here's a list:

=over 4

=item C<Given a max of (\d+) redirects>

=item C<Given a timeout of (\d+) seconds>

=item C<Given a "(.+)" user agent>

=item C<Given the HTTP request header "(.+)" is "(.*)">

=item C<Given the client sends a cookie "(.+)" with value "(.*)">

=item C<When I go to "(.+)">

=item C<When I send a ([A-Z]+) request to "([^"]+)">

=item C<When I send a ([A-Z]+) request to "([^"]+)" with body "(.*)">

A super-cheap hack, but it works for now. Examples:

    When I send a GET request to "http://somedomain.lan/"
    When I send a POST request to "http://somedomain.lan/" with body ""
    When I send a PATCH request to "http://somedomain.lan/some-api" with body "{"hello":"there"}"

=item C<Then the page should be cached>

=item C<Then the page should not be cached>

=item C<Then I should be redirected to "(.+)">

=item C<Then I should not be redirected to "(.+)">

=item C<Then the HTTP response header "(.+)" should match "(.*)">

=item C<Then the HTTP status code should be "(.+)">

=item C<Then the HTTP status code should not be "(.+)">

=item C<Then the HTTP response header "(.+)" should not be there>

=item C<Then the HTTP response header "(.+)" should be "(.+)">

=item C<Then the HTTP response header "(.+)" should match "(.+)">

=item C<Then the HTTP status line should match "(.+)">

=item C<Then the page should contain "(.+)">

=item C<Then the page should not contain "(.+)">

=item C<Then the server should send a CSRF token>

=item C<Then the page MD5 checksum should be "(.+)">

=item C<Then the page should be a valid JSON document>

=item C<Then the json document should have a "(.+)" key>

=item C<Then the json value for the "(.+)" key should not be empty>

=item C<Then the json value for the "(.+)" key should be "(.+)">

=item C<Then the json value for the "(.+)" key should be (greater|lesser) than "(.+)">

=item C<Then the json value for the "(.+)" key should be a timestamp within (\d+) (hours?|minutes?|seconds?|days?)>

=back


=head1 AUTHOR

Cosimo Streppone, C<cosimo@cpan.org>

=head1 LICENSE AND COPYRIGHT

This code is offered under the Open Source BSD license.

    Copyright (c) 2012-2017, Opera Software. All rights reserved.
    Copyright (c) 2018, Kahoot AS. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

=over 4

=item *

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

=item *

Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

=item *

Neither the name of Opera Software nor the names of its contributors may
be used to endorse or promote products derived from this software without
specific prior written permission.

=back

=head1 DISCLAIMER OF WARRANTY

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


=cut
